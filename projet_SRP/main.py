"""
Script principal pour la collecte et l'analyse des produits SRP
"""
import os
import sys
import logging
import argparse
from datetime import date, datetime
from pathlib import Path
from typing import Optional

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent.parent))

from config import START_DATE, END_DATE, COUNTRIES, EXPORT_CONFIG
from .data_collector import SRPDataCollector
from .analyzer import SRPAnalyzer
from .models import SRPProductList

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('srp_collection.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class SRPProcessor:
    """Processeur principal pour la collecte et l'analyse SRP"""
    
    def __init__(self):
        self.collector = SRPDataCollector()
        self.analyzer = SRPAnalyzer()
        self.products = SRPProductList()
        
        # Cr√©er le r√©pertoire de sortie
        os.makedirs(EXPORT_CONFIG["output_dir"], exist_ok=True)
    
    def collect_data(self, start_date: Optional[date] = None, 
                    end_date: Optional[date] = None,
                    countries: Optional[list] = None,
                    from_file: Optional[str] = None) -> SRPProductList:
        """
        Collecte les donn√©es SRP
        
        Args:
            start_date: Date de d√©but de collecte
            end_date: Date de fin de collecte
            countries: Liste des pays √† collecter
            from_file: Fichier JSON √† lire (optionnel)
            
        Returns:
            SRPProductList: Produits collect√©s
        """
        if from_file and os.path.exists(from_file):
            logger.info(f"Lecture des donn√©es depuis le fichier: {from_file}")
            self.products = self.collector.collect_from_file(from_file)
        else:
            logger.info("Collecte des donn√©es depuis l'API")
            self.products = self.collector.collect_from_api(
                start_date=start_date,
                end_date=end_date,
                countries=countries
            )
        
        # Sauvegarder les donn√©es brutes
        output_file = os.path.join(EXPORT_CONFIG["output_dir"], EXPORT_CONFIG["json_filename"])
        self.collector.save_to_file(output_file, self.products)
        
        return self.products
    
    def analyze_data(self, products: Optional[SRPProductList] = None) -> dict:
        """
        Analyse les donn√©es SRP collect√©es
        
        Args:
            products: Produits √† analyser (optionnel)
            
        Returns:
            dict: R√©sultats de l'analyse
        """
        products = products or self.products
        
        if not products.products:
            logger.warning("Aucun produit √† analyser")
            return {}
        
        logger.info(f"D√©but de l'analyse de {len(products.products)} produits")
        
        # Effectuer l'analyse compl√®te
        analysis = self.analyzer.analyze_products(products)
        
        # Exporter l'analyse au format JSON
        analysis_file = os.path.join(EXPORT_CONFIG["output_dir"], EXPORT_CONFIG["analysis_filename"])
        self.analyzer.export_analysis_to_json(analysis_file)
        
        # G√©n√©rer le rapport HTML
        report_file = os.path.join(EXPORT_CONFIG["output_dir"], EXPORT_CONFIG["report_filename"])
        self.analyzer.generate_report(report_file)
        
        logger.info("Analyse termin√©e et export√©e")
        
        return analysis.dict()
    
    def run_complete_workflow(self, start_date: Optional[date] = None,
                             end_date: Optional[date] = None,
                             countries: Optional[list] = None,
                             from_file: Optional[str] = None) -> dict:
        """
        Ex√©cute le workflow complet de collecte et d'analyse
        
        Args:
            start_date: Date de d√©but de collecte
            end_date: Date de fin de collecte
            countries: Liste des pays √† collecter
            from_file: Fichier JSON √† lire (optionnel)
            
        Returns:
            dict: R√©sultats complets
        """
        logger.info("=== D√©but du workflow SRP ===")
        
        # √âtape 1: Collecte des donn√©es
        products = self.collect_data(start_date, end_date, countries, from_file)
        
        if not products.products:
            logger.error("Aucune donn√©e collect√©e. Arr√™t du workflow.")
            return {}
        
        # √âtape 2: Analyse des donn√©es
        analysis = self.analyze_data(products)
        
        # √âtape 3: R√©sum√© des r√©sultats
        self._print_summary(products, analysis)
        
        logger.info("=== Workflow SRP termin√© ===")
        
        return {
            "products": products.dict(),
            "analysis": analysis
        }
    
    def _print_summary(self, products: SRPProductList, analysis: dict):
        """Affiche un r√©sum√© des r√©sultats"""
        print("\n" + "="*60)
        print("üìä R√âSUM√â DE L'ANALYSE SRP")
        print("="*60)
        
        print(f"üî¢ Total des produits collect√©s: {len(products.products):,}")
        print(f"üí∞ Valeur nominale totale: {analysis.get('total_value', 0):,.0f} ‚Ç¨")
        print(f"üìÖ P√©riode: {START_DATE.strftime('%d/%m/%Y')} - {END_DATE.strftime('%d/%m/%Y')}")
        print(f"üåç Pays analys√©s: {', '.join(COUNTRIES)}")
        
        if analysis.get('by_country'):
            print("\nüìà R√©partition par pays:")
            for country, stats in analysis['by_country'].items():
                print(f"   {country}: {stats['count']} produits, "
                      f"{stats['total_value']:,.0f} ‚Ç¨")
        
        if analysis.get('top_issuers'):
            print(f"\nüè¶ Top √©metteur: {analysis['top_issuers'][0]['issuer']} "
                  f"({analysis['top_issuers'][0]['count']} produits)")
        
        print(f"\nüíæ Fichiers g√©n√©r√©s dans: {EXPORT_CONFIG['output_dir']}")
        print("="*60)

def main():
    """Fonction principale du script"""
    parser = argparse.ArgumentParser(description="Collecte et analyse des produits SRP")
    
    parser.add_argument(
        "--start-date",
        type=str,
        help="Date de d√©but (format: YYYY-MM-DD)",
        default=START_DATE.isoformat()
    )
    
    parser.add_argument(
        "--end-date", 
        type=str,
        help="Date de fin (format: YYYY-MM-DD)",
        default=END_DATE.isoformat()
    )
    
    parser.add_argument(
        "--countries",
        nargs="+",
        help="Pays √† analyser (codes ISO)",
        default=COUNTRIES
    )
    
    parser.add_argument(
        "--from-file",
        type=str,
        help="Fichier JSON √† analyser (au lieu de l'API)"
    )
    
    parser.add_argument(
        "--collect-only",
        action="store_true",
        help="Collecter uniquement les donn√©es (pas d'analyse)"
    )
    
    parser.add_argument(
        "--analyze-only",
        type=str,
        help="Analyser uniquement un fichier JSON existant"
    )
    
    args = parser.parse_args()
    
    try:
        # Parser les dates
        start_date = datetime.strptime(args.start_date, "%Y-%m-%d").date()
        end_date = datetime.strptime(args.end_date, "%Y-%m-%d").date()
        
        processor = SRPProcessor()
        
        if args.analyze_only:
            # Mode analyse uniquement
            logger.info(f"Analyse du fichier: {args.analyze_only}")
            products = processor.collector.collect_from_file(args.analyze_only)
            analysis = processor.analyze_data(products)
            processor._print_summary(products, analysis)
            
        elif args.collect_only:
            # Mode collecte uniquement
            logger.info("Mode collecte uniquement")
            products = processor.collect_data(start_date, end_date, args.countries, args.from_file)
            logger.info(f"Collecte termin√©e: {len(products.products)} produits")
            
        else:
            # Mode complet
            processor.run_complete_workflow(start_date, end_date, args.countries, args.from_file)
            
    except Exception as e:
        logger.error(f"Erreur lors de l'ex√©cution: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
